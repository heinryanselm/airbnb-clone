// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String?   @db.ObjectId
  title               String
  description         String
  imageSrc            String
  additionalImages    String[]  // Array of image URLs
  price               Int
  condition           String?
  roomCount           Int
  bathroomCount       Int
  guestCount          Int       // Could be reused as occupancy
  locationValue       String
  address             String?   // Full address
  city                String?
  postalCode          String?
  propertyType        String?   // House, apartment, etc.
  sourceWebsite       String?   // e.g., "Rightmove"
  originalListingUrl  String?   // URL to original listing
  agentName           String?
  agentPhone          String?
  agentEmail          String?
  contactInfo         String?
  estSqFt             Int?      // Estimated square footage
  constructionYear    Int?
  energyRating        String?
  addedDate           DateTime? // When listing was added to source
  lastUpdated         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  user                User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  reservations        Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade) 
}
